name: Build Docker Image and Deploy to EC2 via CodeArtifact

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: user-microservice

jobs:
  test:
    name: Test and Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npx eslint app.js --format=github || true

    - name: Run security audit
      run: npm audit --audit-level=moderate || true

    - name: Test Docker build
      run: |
        docker build -t user-microservice:test .
        docker run --rm user-microservice:test node -e "console.log('Docker build successful')"

  # Job 2: Build and Push to ECR
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ github.sha }}

    - name: Build and push Docker image to ECR
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 3: Deploy to EC2
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: [test, build-and-push]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get EC2 instance IP
      id: get-instance
      run: |
        # Get the instance IP from Terraform state or AWS CLI
        INSTANCE_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=user-microservice-single-instance" \
                   "Name=instance-state-name,Values=running" \
          --query 'Reservations[*].Instances[*].PublicIpAddress' \
          --output text | head -n1)
        
        if [ -z "$INSTANCE_IP" ]; then
          echo "No running EC2 instance found"
          exit 1
        fi
        
        echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
        echo "Found EC2 instance: $INSTANCE_IP"

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ steps.get-instance.outputs.instance_ip }} >> ~/.ssh/known_hosts
    - name: Create deployment directory and copy files
      run: |
        INSTANCE_IP="${{ steps.get-instance.outputs.instance_ip }}"
        
        # Create deployment directory in user home first, then move to /opt
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@$INSTANCE_IP << 'EOF'
          # Create directory in home first
          mkdir -p ~/user-microservice-deploy
          
          # Create /opt directory with proper permissions
          sudo mkdir -p /opt/user-microservice
          sudo chown ec2-user:ec2-user /opt/user-microservice
          sudo chmod 755 /opt/user-microservice
        EOF

    - name: Transfer docker-compose files
      run: |
        INSTANCE_IP="${{ steps.get-instance.outputs.instance_ip }}"
        
        # Copy files to home directory first, then move to /opt
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
          docker-compose.yml \
          .env.example \
          ec2-user@$INSTANCE_IP:~/user-microservice-deploy/
        
        # Move files to /opt directory
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@$INSTANCE_IP << 'EOF'
          # Move files from home to /opt
          sudo cp ~/user-microservice-deploy/* /opt/user-microservice/
          sudo chown ec2-user:ec2-user /opt/user-microservice/*
          
          # Clean up temporary directory
          rm -rf ~/user-microservice-deploy
          
          echo "Files transferred successfully"
          ls -la /opt/user-microservice/
        EOF

    - name: Deploy with Docker Compose
      run: |
        INSTANCE_IP="${{ steps.get-instance.outputs.instance_ip }}"
        
        echo "Deploying application ..."
        
        # SSH into the instance and deploy
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@$INSTANCE_IP << 'EOF'
          cd /opt/user-microservice
          
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY
          
          # Stop existing services
          docker-compose -f docker-compose.yml down || true
          
          # Pull latest images
          docker-compose -f docker-compose.yml pull
          
          # Start services with production overrides
          docker-compose -f docker-compose.yml up -d
          
          # Clean up old images
          docker image prune -f
          
          echo "Docker Compose deployment completed!"
          
          # Show running containers
          echo "Running containers:"
          docker-compose -f docker-compose.yml ps
        EOF