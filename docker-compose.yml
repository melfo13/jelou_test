version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: users_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: users_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d users_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  user-service:
    image: 186846137407.dkr.ecr.us-east-1.amazonaws.com/user-microservice
    container_name: user_microservice
    restart: unless-stopped
    environment:
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: users_db
      DB_USER: postgres
      DB_PASSWORD: password
      NODE_ENV: production
    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    container_name: users_nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - app-network
    depends_on:
      - user-service

networks:
  app-network:
    driver: bridge
    name: user-management-network

volumes:
  postgres_data:
    name: user_postgres_data
